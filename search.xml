<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试一</title>
      <link href="/undefined/%E6%B5%8B%E8%AF%95%E4%B8%80/"/>
      <url>/undefined/%E6%B5%8B%E8%AF%95%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<div class="video-container">[<iframe width="560" height="315" src="https://www.youtube.com/embed/5w83NKPpF5w?si=U-Ce99ynattQgAaJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试页</title>
      <link href="/undefined/%E6%B5%8B%E8%AF%95%E9%A1%B5/"/>
      <url>/undefined/%E6%B5%8B%E8%AF%95%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-微信自动回复代码top-img-https-img-090227-xyz-file-ae62475a131f3734a201c-png"><a href="#title-微信自动回复代码top-img-https-img-090227-xyz-file-ae62475a131f3734a201c-png" class="headerlink" title="title: 微信自动回复代码top_img: https://img.090227.xyz/file/ae62475a131f3734a201c.png"></a>title: 微信自动回复代码<br>top_img: <a href="https://img.090227.xyz/file/ae62475a131f3734a201c.png">https://img.090227.xyz/file/ae62475a131f3734a201c.png</a></h2><p>import numpy as np<br>import random<br>import time<br>import threading<br>import concurrent.futures<br>from uiautomation import WindowControl<br>from openai import OpenAI</p><h1 id="配置区域"><a href="#配置区域" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D; 配置区域 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D; 配置区域 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h1><p>SILICONFLOW_API_KEY &#x3D; “sk-“  # 硅基流动的 API<br>MODEL_NAME &#x3D; “deepseek-ai&#x2F;DeepSeek-V2.5”                                    # 调用的大模型<br>BASE_URL &#x3D; “<a href="https://api.siliconflow.cn/v1">https://api.siliconflow.cn/v1</a>“                                  # 调用大模型的网址<br>SKIP_KEYWORDS &#x3D; [‘π’, ‘队’, ‘沟通’, ‘群’]                                   # 需要跳过不做回复的群或者用户<br>MIN_DELAY &#x3D; 0.5                                                            # 最小延迟(秒)<br>MAX_DELAY &#x3D; 2.5                                                            # 最大延迟(秒)<br>GLOBAL_COOLDOWN &#x3D; 3                                                        # 全局冷却时间(秒)</p><h1 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h1><h1 id="初始化微信窗口"><a href="#初始化微信窗口" class="headerlink" title="初始化微信窗口"></a>初始化微信窗口</h1><p>wx &#x3D; WindowControl(Name&#x3D;’微信’, searchDepth&#x3D;1)<br>wx.SwitchToThisWindow()</p><h1 id="配置硅基流动客户端"><a href="#配置硅基流动客户端" class="headerlink" title="配置硅基流动客户端"></a>配置硅基流动客户端</h1><p>client &#x3D; OpenAI(<br>    base_url&#x3D;BASE_URL,<br>    api_key&#x3D;SILICONFLOW_API_KEY,<br>    default_headers&#x3D;{<br>        “User-Agent”: “WeChatBot&#x2F;2.0”,<br>        “X-Request-Source”: “auto-reply-system”<br>    }<br>)</p><p>def is_ai_chat(contact_name):<br>    “””判断是否需要自动回复”””<br>    return not any(kw in contact_name for kw in SKIP_KEYWORDS)</p><p>def generate_reply(prompt):<br>    “””获取AI回复（带错误重试）”””<br>    for attempt in range(3):<br>        try:<br>            response &#x3D; client.chat.completions.create(<br>                model&#x3D;MODEL_NAME,<br>                messages&#x3D;[{“role”: “user”, “content”: prompt}],<br>                temperature&#x3D;0.7,<br>                max_tokens&#x3D;500<br>            )<br>            return response.choices[0].message.content<br>        except Exception as e:<br>            print(f”第{attempt + 1}次尝试失败: {str(e)}”)<br>            time.sleep(2 ** attempt)  # 指数退避<br>    return None</p><p>def simulate_human_typing(text):<br>    “””模拟人类输入速度”””<br>    text &#x3D; text.replace(‘\n’, ‘{Shift}{Enter}’).strip()<br>    for char in text:<br>        wx.SendKeys(char, waitTime&#x3D;0.1)<br>        time.sleep(random.uniform(0.05, 0.2))  # 随机输入间隔</p><p>def truncate_message(message, max_bytes&#x3D;50):<br>    “””<br>    截断消息，确保最终编码为 UTF-8 后的字节数不超过 max_bytes。<br>    处理多字节字符被截断的问题，保证字符完整性。<br>    “””<br>    encoded &#x3D; message.encode(‘utf-8’)<br>    if len(encoded) &lt;&#x3D; max_bytes:<br>        return message<br>    # 截取前 max_bytes 字节<br>    truncated &#x3D; encoded[:max_bytes]<br>    # 如果最后一个字符不完整，逐步去除最后一个字节直至能正确解码<br>    while True:<br>        try:<br>            result &#x3D; truncated.decode(‘utf-8’)<br>            break<br>        except UnicodeDecodeError:<br>            truncated &#x3D; truncated[:-1]<br>    return result</p><h1 id="全局任务列表，保存-接收时间-future-联系人名称-消息内容"><a href="#全局任务列表，保存-接收时间-future-联系人名称-消息内容" class="headerlink" title="全局任务列表，保存 (接收时间, future, 联系人名称, 消息内容)"></a>全局任务列表，保存 (接收时间, future, 联系人名称, 消息内容)</h1><p>pending_tasks &#x3D; []<br>pending_lock &#x3D; threading.Lock()</p><h1 id="线程池，用于并发生成回复"><a href="#线程池，用于并发生成回复" class="headerlink" title="线程池，用于并发生成回复"></a>线程池，用于并发生成回复</h1><p>executor &#x3D; concurrent.futures.ThreadPoolExecutor(max_workers&#x3D;5)</p><p>def dispatcher():<br>    “””<br>    调度线程：按消息接收时间顺序检查任务列表，<br>    对已完成回复生成的任务，执行延迟、截断、模拟输入发送操作，并等待全局冷却时间。<br>    “””<br>    global pending_tasks<br>    while True:<br>        with pending_lock:<br>            # 按接收时间排序，确保回复顺序<br>            pending_tasks.sort(key&#x3D;lambda x: x[0])<br>            if pending_tasks and pending_tasks[0][1].done():<br>                timestamp, future, contact_name, last_msg &#x3D; pending_tasks.pop(0)<br>                reply &#x3D; future.result()<br>            else:<br>                reply &#x3D; None<br>        if reply is not None:<br>            print(f”收到消息[{contact_name}]: {last_msg}”)<br>            if reply:<br>                # 添加随机延迟<br>                delay &#x3D; random.uniform(MIN_DELAY, MAX_DELAY)<br>                print(f”正在准备回复(等待{delay:.1f}秒)…”)<br>                time.sleep(delay)<br>                # 组合消息内容并截断到最大50字节（UTF-8编码）<br>                full_reply &#x3D; f”【AI回复】{reply}”<br>                final_reply &#x3D; truncate_message(full_reply, 50)<br>                print(f”发送回复: {final_reply}”)<br>                # 模拟人工输入<br>                simulate_human_typing(final_reply)<br>                wx.SendKeys(‘{Enter}’, waitTime&#x3D;0.3)<br>            else:<br>                print(“自动回复生成失败”)<br>            # 全局冷却时间<br>            time.sleep(GLOBAL_COOLDOWN)<br>        else:<br>            time.sleep(0.1)  # 无任务或任务未完成，稍作等待</p><h1 id="启动调度线程"><a href="#启动调度线程" class="headerlink" title="启动调度线程"></a>启动调度线程</h1><p>dispatcher_thread &#x3D; threading.Thread(target&#x3D;dispatcher, daemon&#x3D;True)<br>dispatcher_thread.start()</p><h1 id="主循环：不断检测新消息，并提交生成回复任务"><a href="#主循环：不断检测新消息，并提交生成回复任务" class="headerlink" title="主循环：不断检测新消息，并提交生成回复任务"></a>主循环：不断检测新消息，并提交生成回复任务</h1><p>while True:<br>    try:<br>        # 查找新消息<br>        msg_control &#x3D; wx.ListControl(Name&#x3D;’会话’).TextControl(searchDepth&#x3D;4)<br>        if not msg_control.Exists(5):  # 5秒超时<br>            time.sleep(1)<br>            continue</p><pre><code>    # 点击消息进入聊天窗口    msg_control.Click(simulateMove=False)    # 获取联系人信息（假设最后一个子控件为最新消息）    contact = wx.ListControl(Name=&#39;消息&#39;).GetChildren()[-1]    contact_name = contact.Name    # 跳过指定联系人    if not is_ai_chat(contact_name):        print(f&quot;跳过联系人: &#123;contact_name&#125;&quot;)        time.sleep(1)        continue    # 获取消息内容（示例中直接用 contact.Name 作为消息内容，可根据实际情况调整）    last_msg = contact.Name    print(f&quot;检测到新消息: &#123;last_msg&#125;&quot;)    # 获取当前时间作为接收时间戳    timestamp = time.time()    # 将生成回复任务提交至线程池    future = executor.submit(generate_reply, last_msg)    with pending_lock:        pending_tasks.append((timestamp, future, contact_name, last_msg))    # 主线程短暂等待后继续检测    time.sleep(0.5)except Exception as e:    print(f&quot;运行时异常: &#123;str(e)&#125;&quot;)    time.sleep(10)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/undefined/hello-world/"/>
      <url>/undefined/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
